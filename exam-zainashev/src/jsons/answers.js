export default [
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 1: NPM - это онлайн платформа (репозиторий), входящий в состав node.js, для публикации проектов (приложений, библиотек) написанных на JS с открытым исходным кодом. При инициализации разрабатываемого пакета в NPM появляется возможность с использованием командной строки взаимодействовать как с другими пакетами или библиотеками NPM для использования их возможностей в своем проекте, так и с браузерами, серверами для запуска проекта.",
    "id": "1"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 2: npm version вызывает изменение версии разрабатываемого пакета (фиксируется в package.json). Значение версии может быть изменено в зависимости от выбранного аргумента: - увеличить разряд на 1 (patch, minor, major), - добавить преразрядный символ через dash (prepatch, preminor, premajor, prerelease), - from-git - будет совершена попытка прочесть последний гит-тэг и на его основании зафиксируется версия, - версия может быть задана в виде 0.0.0 маски.",
    "id": "2"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 3: npm install вызывает скачивание npm-пакетов в папку проекта node_modules в соответствии с конфигурацией зависимостей в package.json, обновив при этом версию скачиваемых пакетов, где это возможно (при указании перед версией ^ - последний минорный релиз, ~ - последний патч-релиз).",
    "id": "3"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 4: npm uninstall удаляет пакеты (при указании конкретного пакета - этот пакет и все пакеты, установленные от его имени) из node_modules, а также из зависимостей package.json и package-lock.json (при отсутствии в команде --no-save).",
    "id": "4"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 5: npm update обновляет все пакеты, указанные в конфигурации package.json до последней версии (в соответствии с тэгами), при отсутствии пакетов, описанных в конфигурации, он также установит их последние версии. Для обновления конкретного пакета необходимо указать его имя в команде. Для обновления пакета до последней версии, если менялся мажорный разряд, необходимо использовать команду npm install.",
    "id": "5"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 6: npm run-script вызывает выполнение команды из scripts package.json. Если команда не определена, npm run-script вызовет перечисление всех доступных сценариев. Для npm run-script алиас npm run.",
    "id": "6"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 7: GitHub - это онлайн платформа для создания и размещения удаленных репозиториев. Удаленные репозитории позволяют группе разработчиков сохранять (команда clone) репозиторий (его содержимое) локально и работать каждый в своей ветке (branch). При необходимости внести (транслировать) свои изменения в основную ветку репозитория необходимо воспользоваться командой push или отправить pull request (запрос на внесение изменений в мастер-ветку). Получить изменения с удаленного репозитория можно по команде fetch, либо воспользоваться командой pull, чтобы получить изменения и сразу наложить их на свой локальный репозиторий.",
    "id": "7"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 8: На платформе stackblitz.com можно создавать типовые проекты путем выбора типа проекта из доски (dashboard) с их последующим редактированием. Также можно путем указания ссылки на репозиторий gitHub создавать проект на stackblitz.com, который будет копировать файлы репозитория gitHub и создавать окружение для функционирования проекта.",
    "id": "8"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 9: https://stackblitz.com/github/aeoloth/React-hw-01-09/tree/hw-01-09/hw-01-09?file=src%2FApp.css",
    "id": "9"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 10: Команда npx create-react-app name-app может быть выполнена при наличии node версии 10.16 и выше, и npm версии 5.6 и выше. npx create-react-app name-app создает фронтенд-сборку react-приложения, а также устанавливает среду разработки.",
    "id": "10"
  },
  {
    "idTask": "61209cdd780b438a6a3a6722",
    "text": "Задание 11: https://stackblitz.com/github/aeoloth/React-hw-01-11/tree/hw-01-11/hw-01-11?file=src%2FApp.js",
    "id": "11"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 1: JSX - это расширение языка JS, так называемый синтаксический сахар. Он представляет собой некую комбинацию кода на JS и разметки XML, служит для создания компонентов, содержащих и разметку, и логику поведения.",
    "id": "1"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 2: https://stackblitz.com/github/aeoloth/hw-02-02/tree/my-app-hw02-t02/hw-02-02?file=src%2Findex.js",
    "id": "2"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 3: https://stackblitz.com/github/aeoloth/React-hw-02-03/tree/hw-02-03/hw-02-03",
    "id": "3"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 4: Babel - это JS компилятор, выполняющий следующие функции: - перевод ES самой свежей спецификации в ES старой версии (ES5); - для компиляции JSX (для запуска реакт-приложений в браузерах); - Babel поддерживает типизацию Flow и Typescript. Основная цель использования Babel - запуск проектов, написанных с использованием новейших технологий, в устаревших версиях браузеров.",
    "id": "4"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 4: webpack - это мощный сборщик пакетов, внутри которого можно собрать множество загрузчиков и плагинов, способствующих ускоренной загрузке проекта за счет обработки файлов во время компиляции и возможности асинхронной загрузки блоков пакета, уменьшению размера среды выполнения за счет устранения зависимостей во время компиляции, связке модулей JS (в том числе различных нотаций).",
    "id": "5"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 5: расширение React Developer Tools - это JS приложение, устанавливаемое в браузер, которое позволяет облегчить отслеживание поведения React-компонентов и дебаг. Расширение добавляет в панель разработчика две вкладки: Components - позволяющая увидеть все компоненты реакт в дереве иерархии, а также пропсы, state, hooks, src каждого компонента (при наличии), и Profiler - позволяющая отследить время рендеринга каждого компонента.",
    "id": "6"
  },
  {
    "idTask": "6120f580571a96541c653c32",
    "text": "Задание 6: https://stackblitz.com/github/aeoloth/React-hw-02-06?file=package.json",
    "id": "7"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 1.1: В видео-ролике автор показывает работу метода пакета ReactDOM.render() на примере рендеринга div'а, содержащего два заголовка, в одном из которых отображается простой текст, а в другом текст + результат выполнения функции JS toLocalTimeString. Автор также применяет функцию setInterval для вызова рендеринга раз в секунду. Понравилось то, что автор ролика иллюстрирует свое описание написанием кода и показывает результат его выполнения. Улучшить рассказ можно было бы подробным объяснением отличия элемента от компонента, а также проиллюстрировав, что рендер элементов выполняется только один раз: без использования функции setInterval на экране отобразится время в момент запроса toLocalTimeString и не изменится во времени.",
    "id": "1"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 1.2: В видео-ролике автор рассказывает про компоненты React.js. Показывает функциональный, классовый и компонент в виде стрелочной функции. Также объясняет, что такое props. Понравился стиль и последовательность изложения, показ кода и результата выполнения. Хотелось бы получить более подробное описание контекста (this).",
    "id": "2"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 2: https://stackblitz.com/github/aeoloth/hw-02-t3/tree/master/hw2-t3?file=src%2Findex.js",
    "id": "3"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 3: Автор видео иллюстрирует работу JSX, передачу JSX как переменной, так и в результате выполнения функции. Проводит аналогию между заданием элементов на JSX и в результате выполнения функции React.createElement(). Объясняет рендеринг элементов: реакт находит корневой элемент, сравнивает DOM с virtualDom, находит отличия и меняет только те узлы, которые отличаются. Показывает, как создать простую новостную страницу (изображение и новостные карточки), карточки заполняет сначала путем прямого указания props, а затем меняет на получение props из массива с использованием функции map(). Понравился стиль и последовательность изложения, понятный язык объяснения, показ кода и результата выполнения. Не стал бы что-то улучшать, информация доведена доступно.",
    "id": "4"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 4: https://stackblitz.com/github/aeoloth/hw2-t3/tree/master/hw-2-t4",
    "id": "5"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 5: В видео автор показывает условный рендеринг: меняет видимость элемента в зависимости от значения input типа checkbox. Также модифицирует код с использованием тернарного оператора, для отражения того или иного элемента в зависимости от значения input типа checkbox. Понравился пример применения условного рендеринга. Хотелось бы добавить теории: что и зачем пишется в коде.",
    "id": "6"
  },
  {
    "idTask": "612a93fc3354858e3462d4c7",
    "text": "Задание 6: https://stackblitz.com/github/aeoloth/hw-2-t6/tree/master/hw-2-t6?file=src%2FApp.js",
    "id": "7"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 1: автор объясняет состояние компонента, приводит примеры изменения состояния компонента: отображение/удаление со страницы текстовой информации по нажатию на кнопку, инкремент/декремент. Понравился стиль и последовательность изложения, понятный язык объяснения, показ кода и результата выполнения. Не стал бы что-то улучшать, информация доведена доступно. https://stackblitz.com/github/aeoloth/react-hw-4-t1/tree/master/hw-4-t1",
    "id": "1"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 2: в видео ролике Алексей Данчин (ConstCode) показывает как работает обработка событий в функциональных и классовых компонентах, рассматривает разные способы привязки контекста к событию (для классового компонента). Пример: счетчик нажатий на кнопку. GitHub профиля лектора: https://github.com/Aleksey-Danchin Пример с видео:  https://stackblitz.com/github/aeoloth/react-hw-4-t2/tree/master/hw-4-t2",
    "id": "2"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 3: В ролике автор объясняет, что такое state, и показывает на примере публикации комментариев на странице как это реализовать с использованием чистого js, а также с использованием классового и функционального компонентов ReactJS. https://stackblitz.com/github/aeoloth/react-hw-4-t3/tree/master/hw-4-t3?file=src%2FApp.js",
    "id": "3"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 4: в этом видео показан пример обработки событий.Заданы state name и text. text переопределяется при вводе информации в текстовое поле по событию onChange. name переопределяется при нажатии на кнопку (событие onClick).",
    "id": "4"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 5: В видео рассматривается обработка событий, передача их в компонент, и изменение отображаемых на странице элементов в результате обработки событий (в конкретном примере в результате события onClick добавлялся/удалялся новый стиль элемента). Повторенный пример из видео: https://stackblitz.com/github/aeoloth/react-hw-4-t5/tree/master/hw-4-t5 Доп. задание: https://stackblitz.com/github/aeoloth/react-hw-4-t5-2/tree/master/hw-4-t5-2",
    "id": "5"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 6: Выводится суммарная зарплата исходя из начальных данных массива (до редактирования данных на странице): https://stackblitz.com/github/aeoloth/react-hw-4-t6/tree/master/hw-4-t6",
    "id": "6"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 7: https://stackblitz.com/github/aeoloth/react-hw-4-t7/tree/master/hw-4-t7",
    "id": "7"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 8: https://stackblitz.com/github/aeoloth/react-hw-4-t8/tree/master/hw-4-t8",
    "id": "8"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 9: https://stackblitz.com/github/aeoloth/react-hw-4-t9/tree/master/hw-4-t9",
    "id": "9"
  },
  {
    "idTask": "612a95809677848ef97025ec",
    "text": "Задание 10: https://stackblitz.com/github/aeoloth/react-hw-4-t10/tree/master/hw-4-t10",
    "id": "10"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 1: рассмотрены методы жизненного цикла, используемые для классового компонента (по порядку): 1) Первым запускается constructor(), при этом отрабатывает только один раз и только при монтировании компонента. 2) getDerivedStateFromProps() запускается после конструктора при монтировании или первым при обновлении. Метод используется в случаях, когда состояние зависит от изменений в пропсах, и возвращает объект для обновления состояния или null (если не нужно ничего обновлять). 3) render() - обязательный метод, рендерит компонент React. 4) componentDidMount() - запускается непосредственно после первого рендера (при монтировании) и только тогда. 5) componentDidUpdate() - запускается после каждого рендера при обновлении (кроме монтирования). В рамках функциональных компонентов методы жизненного цикла не действуют. Для моделирования управления жизненным циклом функциональных компонентов используют хуки (в примере рассмотрены useState и useEffect). https://stackblitz.com/github/aeoloth/React-hw-6-t1/tree/master/hw-6-t1?file=src%2FTest1.js",
    "id": "1"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 2: рассмотрены методы жизненного цикла componentDidMount(), componentDidUpdate() и componentWillUnmount(). Но до логического завершения (показать, как работает componentWillUnmount()) лектор урок не довел. https://stackblitz.com/github/aeoloth/React-hw-6-t2/tree/master/hw-6-t2",
    "id": "2"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 3: рассмотрены методы жизненного цикла componentDidMount(), componentDidUpdate(), getDerivedStateFromProps(), shouldComponentUpdate(), getSnapshotBeforeUpdate(), componentWillUnmount(), componentDidCatch(). https://stackblitz.com/github/aeoloth/React-hw-6-t3/tree/master/hw-6-t3",
    "id": "3"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 4: автор рассказал про методы жизненного цикла и показал пример с анимированными часами. При этом использовал componentDidMount для запуска таймера и предусмотрел удаление таймера в случае удаления компонента (componentWillUnmount()).  https://stackblitz.com/github/aeoloth/React-hw-6-t4/tree/master/hw-6-t4",
    "id": "4"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 5: автор рассказал про методы жизненного цикла, на примере показал работу устаревших на текущий момент методов componentWillMount(), componentWillReceiveProps(), componentWillUpdate().  https://stackblitz.com/github/aeoloth/React-hw-6-t5/tree/master/hw-6-t5?file=src%2Fcomponents%2FArticle.js",
    "id": "5"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 6: в ролике автор объясняет взаимодействие React с объектом класса, поясняет, что такое методы жизненного цикла. Реализует на примере направление запроса к API https://social-network.samuraijs.com/api/1.0/users из метода componentDidMount() вместо конструктора.",
    "id": "6"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 7: в ролике автор рассмотрел методы жизненного цикла, когда они вызываются, проиллюстрировал на примере, как работают методы жизненного цикла.  https://stackblitz.com/github/aeoloth/React-hw-6-t7/tree/master/hw-6-t7?file=src%2FCcomponent.js",
    "id": "7"
  },
  {
    "idTask": "613300ae050d62301d886d89",
    "text": "Задание 8: в ролике автор рассмотрел методы жизненного цикла, когда они вызываются, для чего используются. https://stackblitz.com/github/aeoloth/React-hw-6-t8/tree/master/hw-6-t8?file=src%2FApp.js  Приложение на React Native так и не удалось отобразить в stackblitz:  https://stackblitz.com/github/aeoloth/React-hw-6-t8-native?file=package.json https://github.com/aeoloth/React-hw-6-t8-native",
    "id": "8"
  },
  {
    "idTask": "61330e5ef4fb9674a9c2fac4",
    "text": "Задание 1: в ролике рассмотрен условный рендеринг. Показаны примеры: условный рендеринг элементов: - с использованием тернарного оператора: если выражение = true, рендерится один элемент/узел, если false - другой; - двойного амперсанда (&&): если первая часть выражения = true, рендерится элемент/узел во второй части выражения; - условный рендеринг при изменении состояния (state) компонента App. При этом рассмотрен как условный рендеринг элементов, так и текста. https://stackblitz.com/github/aeoloth/hw-5-t1/tree/master/hw-5-t1",
    "id": "1"
  },
  {
    "idTask": "61330e5ef4fb9674a9c2fac4",
    "text": "Задание 2: в ролике рассмотрен условный рендеринг с использованием конструкций if-else, switch-case, тернарных операторов, где в зависимости от условий отображается тот или иной узел (html-разметка внутри условия, а также условия внутри элементов, внутри атрибутов), и с использованием &&. https://stackblitz.com/github/aeoloth/react-hw-5-t2/tree/master/hw-5-t2?file=src%2Findex.js",
    "id": "2"
  },
  {
    "idTask": "61330e5ef4fb9674a9c2fac4",
    "text": "Задание 3: в ролике рассмотрен условный рендеринг: - задано состояние функционального компонента, кнопка, меняющая состояние на противоположное (boolean), конструкция if, которая наполняет возвращаемый (отображаемый в браузере) компонент content в случае, если состояние = true. - далее компонент content был вынесен в отдельный файл и импортировался в App. - далее аналогично была создана кнопка, которая рекурсивно создавала саму себя. https://stackblitz.com/github/aeoloth/React-hw-5-t3/tree/master/hw-5-t3",
    "id": "3"
  },
  {
    "idTask": "613c802be383b80408691744",
    "text": "Задание 1: В ролике автор показал вывод заданного массива в таблицу с использованием функции map(), а также вывел в таблицу кнопку для удаления каждого элемента списка. При этом автор показал, что в случае если ключи не указаны, при удалении одного элемента перерисовываются все последующие элементы списка. Указание ключей позволяет React не перерисовывать элементы в случае, если они не изменились. https://stackblitz.com/github/aeoloth/React-hw-7-t1/tree/master/hw-7-t1",
    "id": "1"
  },
  {
    "idTask": "613c802be383b80408691744",
    "text": "Задание 2: https://stackblitz.com/github/aeoloth/React-hw-7-t2/tree/master/hw-7-t2",
    "id": "2"
  },
  {
    "idTask": "613c80e8e289ec24f7c3ee71",
    "text": "Задание 1: В ролике лектор показал, что одинаковые данные в рамках состояний отдельных компонентов независимы. Далее лектор передал состояние родительского компонента в дочерние в качестве пропсов. Создал в родительском компоненте функцию, изменяющую состояние, и передал в дочерний как пропс, из дочернего компонента вызвал эту функцию, передав ей новые параметры (поднятие состояния).  https://stackblitz.com/github/aeoloth/React-hw-8-t1/tree/master/hw-8-t1?file=src%2FCitiesList.js",
    "id": "1"
  },
  {
    "idTask": "613c80e8e289ec24f7c3ee71",
    "text": "Задание 2: В ролике лектор с целью настройки нового механизма открытия статей (разворачивание блока статьи), а именно при открытии одной статьи закрывать другую, реализует в родительском компоненте состояние Идентификатор открытой статьи и передает его дочернему компоненту, ответственному за отрисовку блоков статей. При этом для каждой статьи существует своя кнопка, по которой предполагается разворачивать и сворачивать блок статьи. В новых условиях необходимо возвращать в родительский компонент информацию о том, какая статья открыта, т.е. изменять состояние Идентификатор открытой статьи. С этой целью автор реализует функцию открытия/закрытия статьи по клику в родителе и передает ее дочернему компоненту в качестве пропса. Вызванная из дочернего компонента функция открытия/закрытия статьи меняет состояние Идентификатор открытой статьи. https://stackblitz.com/github/aeoloth/React-hw-8-t2/tree/master/hw-8-t2?file=src%2Fcomponents%2FArticle.js ",
    "id": "2"
  },
  {
    "idTask": "613c80e8e289ec24f7c3ee71",
    "text": "Задание 3: Лектор объясняет, что массивы хранят не объекты, а ссылки на объекты. Обновление сложных стейтов правильно производить не путем изменения существующего объекта, а путем создания нового объекта и обновления ссылки на новый объект. Дает примеры правильной и неправильной реализации обновления состояния. https://stackblitz.com/github/aeoloth/React-hw-8-t3/tree/master/hw-8-t3",
    "id": "3"
  },
  {
    "idTask": "613c80e8e289ec24f7c3ee71",
    "text": "Задание 4: По сюжету видеоролика лектор вынес в отдельный компонент сначала счетчик нажатий на image, затем создал отдельный компонент, отвечающий за отрисовку шаблона. Позже вынес передаваемые данные в отдельный массив. https://stackblitz.com/github/aeoloth/React-hw-8-t4/tree/master/hw-8-t4?file=src%2Findex.js",
    "id": "4"
  },
  {
    "idTask": "613c80e8e289ec24f7c3ee71",
    "text": "Задание 5: В ролике автор рассказывает на примерах суть наследования, композиции, поясняет преимущество композиции над наследованием (отсутствие повторения кода), а также рассказывает про функции высшего порядка (HOC). https://stackblitz.com/github/aeoloth/React-hw-8-t5/tree/master/hw-8-t5",
    "id": "5"
  },
  {
    "idTask": "6145d370fc3a143559556cea",
    "text": "Задание 1: https://stackblitz.com/github/aeoloth/React-hw-9-t1/tree/master/hw-9-t1",
    "id": "1"
  },
  {
    "idTask": "6145d370fc3a143559556cea",
    "text": "Задание 2: https://stackblitz.com/github/aeoloth/React-hw-9-t2/tree/master/hw-9-t2?file=src%2FApp.js",
    "id": "2"
  },
  {
    "idTask": "6145d370fc3a143559556cea",
    "text": "Задание 3: https://stackblitz.com/github/aeoloth/React-hw-9-t3/tree/master/hw-9-t3?file=src%2FApp.js",
    "id": "3"
  },
  {
    "idTask": "6145d370fc3a143559556cea",
    "text": "Задание 4: https://stackblitz.com/github/aeoloth/React-hw-9-t4/tree/master/hw-9-t4",
    "id": "4"
  },
  {
    "idTask": "6145d370fc3a143559556cea",
    "text": "Задание 5: https://stackblitz.com/github/aeoloth/React-hw-9-t5/tree/master/hw-9-t5",
    "id": "5"
  },
  {
    "idTask": "6145d370fc3a143559556cea",
    "text": "Задание 7: Ссылки, отображаемые на странице, меняют только URL. Для отображения соответствующего компонента при изменении URL необходимо настроить роутинг: 1) Импортировать пакет react-router-dom, 2) Обернуть изменяемый узел в <BrowserRouter>, 3) Использовать компонент <Route> для отрисовки конкретного компонента в зависимости от URL (задается в атрибуте path).",
    "id": "7"
  }
];
